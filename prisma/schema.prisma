// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userProfile        UserProfile?
  Trip               Trip[]
  travelBuddyRequest TravelBuddyRequest[]

  @@map("users")
}

model UserProfile {
  id     String @id @default(uuid())
  bio    String
  age    Int
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("userprofile")
}

model Trip {
  id                 String               @id @default(uuid())
  destination        String
  startDate          String
  endDate            String
  activities         String[]
  budget             Int
  userId             String
  user               User                 @relation(fields: [userId], references: [id])
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  travelBuddyRequest TravelBuddyRequest[]

  @@map("trip")
}

model TravelBuddyRequest {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  tripId String
  trip   Trip   @relation(fields: [tripId], references: [id])

  status TravelStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("travelbuddyrequest")
}

enum TravelStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UserRole {
  USER
  ADMIN
}
